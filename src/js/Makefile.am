SUFFIXES = .js .js.lo

# Previous versions of ld utility were broken and ignored noexecstack.
# It's why we have to use such an ugly hack in order to fix .note.GNU-stack
# section using objcopy.

.js.js.lo:
	$(LD) -r -o "$*.js.o" -z noexecstack --format=binary "$<"
if HAVE_OBJCOPY
	$(OBJCOPY) --rename-section .data=.rodata,alloc,load,readonly,data,contents "$*.js.o"
	$(OBJCOPY) --add-section ".note.GNU-stack"=`ls -1 $(top_srcdir)/fix/*.o | head -1` $*.js.o 2>/dev/null; true
else
	@echo "objcopy not found - data sections cannot be changed to readonly ones and .note.GNU-stack cannot be fixed."
endif
	@echo "# $@ - a libtool object file" > "$@"
	@echo "# Generated by $(shell $(LIBTOOL) --version | head -n 1)" >>"$@"
	@echo "#" >>"$@"
	@echo "# Please DO NOT delete this file!" >>"$@"
	@echo "# It is necessary for linking the library." >>"$@"
	@echo >>"$@"
	@echo "# Name of the PIC object." >>"$@"
	@echo "pic_object='$*.js.o'" >>"$@"
	@echo >>"$@"
	@echo "# Name of the non-PIC object" >>"$@"
	@echo "non_pic_object='$*.js.o'" >>"$@"
	@echo >>"$@"

noinst_LTLIBRARIES = libdbgres.la

libdbgres_la_SOURCES = js_resources.hpp \
	js_resources.cpp

libdbgres_la_CPPFLAGS = -I$(top_srcdir)/utils -z noexecstack

libdbgres_la_LIBADD = mozjs_dbg.js.lo \
	module.js.lo

libdbgres_la_LDFLAGS = -no-undefined 

CLEANFILES = *.js.lo \
	*.js.o

EXTRA_DIST = *.js \
	package.json
